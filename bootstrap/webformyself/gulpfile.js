let gulp = require('gulp'),
    rename = require('gulp-rename'),
    sass = require('gulp-sass')(require('node-sass')),
    autoprefixer = require('gulp-autoprefixer'),
    sourcemaps = require('gulp-sourcemaps'),
    browserSync = require('browser-sync').create(),
    htmlmin = require('gulp-htmlmin');

const options = {
  includeAutoGeneratedTags: true,
  removeAttributeQuotes: true,
  removeComments: true,
  removeRedundantAttributes: true,
  removeScriptTypeAttributes: true,
  removeStyleLinkTypeAttributes: true,
  sortClassName: true,
  useShortDoctype: true,
  collapseWhitespace: true
};

function comScssInMiniCss(done) { //compilation Scss in Minification Css

	gulp.src('./resource/scss/**/*')
	  .pipe(sourcemaps.init())
	  .pipe( sass({
	  	errorLogToConsole: true,
	  	outputStyle: 'compressed'
	  }) )
	  .on('error', console.error.bind(console))
	  .pipe( autoprefixer({
	  	overrideBrowserslist: "last 2 versions"
	  }) )
	  .pipe( rename({suffix: '.min'}) )
	  // .pipe(sourcemaps.write('./'))
	  .pipe(sourcemaps.write())
	  .pipe( gulp.dest('./public/css/') )
	  .pipe(browserSync.stream());

	done();
}

function miniHtml(done) {

	gulp.src("./resource/html/**/*")
	  .pipe(sourcemaps.init())
	  .pipe(htmlmin(options))
	  .on('error', console.error.bind(console))
	  .pipe(rename('index.html'))
	  .pipe(sourcemaps.write())
	  .pipe(gulp.dest('./'))
	  .pipe(browserSync.stream());

	done();

}

function browserReload(done) {
	browserSync.reload();
	done();
}

function server(done) {
	browserSync.init({
		server: {
			baseDir: "./"
		},
		port: 3000
	});
	done();
}

function watchFiles() {
	gulp.watch('./resource/scss/**/*', comScssInMiniCss);
	gulp.watch('./resource/html/**/*', miniHtml);
	// gulp.watch('./**/*.php', browserReload);
	gulp.watch('./resource/js/**/*', browserReload);
}

gulp.task('default', gulp.parallel(server, gulp.series(comScssInMiniCss, miniHtml, watchFiles)));
gulp.task('html', miniHtml);
gulp.task('sass', comScssInMiniCss);

// exports.def = defaultSomeTask;